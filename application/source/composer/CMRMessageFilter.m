/**
  * $Id: CMRMessageFilter.m,v 1.12 2007/09/04 07:45:43 tsawada2 Exp $
  * 
  * CMRMessageFilter.m
  *
  * Copyright (c) 2003, Takanori Ishikawa.
  * See the file LICENSE for copying permission.
  */
#import "CMRMessageFilter.h"
//#import "CocoMonar_Prefix.h"
#import "CMRThreadMessage.h"
#import "CMRThreadSignature.h"
#import "CMXTextParser.h"

#import "BSNGExpression.h"
#import <OgreKit/OgreKit.h>
// for debugging only
#define UTIL_DEBUGGING		0
#import "UTILDebugging.h"

static int detectMessageAny_(
				CMRMessageSample *s,
				CMRThreadMessage *m,
				CMRThreadSignature *t,
				NSArray *noNamesArray);
static int doDetectMessageAny_(
				CMRThreadMessage	*m1,	// sample
				CMRThreadSignature	*t1,	// sample
				CMRThreadMessage	*m2,	// target
				CMRThreadSignature	*t2,	// target
				NSArray *noNamesArray);

// ê›íËÇ≥ÇÍÇƒÇ¢Ç»Ç¢ID Ç‚ ÇÊÇ≠Ç†ÇÈñºëOìôÇÕî‰ärëŒè€Ç…ÇµÇ»Ç¢
static BOOL checkMailIsNonSignificant_(NSString *mail);
static BOOL checkNameIsNonSignificant_(NSString *name);
static BOOL checkIDIsNonSignificant_(NSString *idStr_);
static BOOL checkNameHasResLink_(NSString *name);


@implementation CMRMessageDetecter
/* primitive */
- (BOOL)detectMessage:(CMRThreadMessage *)aMessage
{
	return NO;
}
@end

@implementation CMRSamplingDetecter
- (SGBaseCArrayWrapper *)samples
{
	if (!_samples) {
		_samples = [[SGBaseCArrayWrapper alloc] init];
	}
	return _samples;
}

- (NSArray *)sampleArray
{
	return [self samples];
}

- (unsigned)numberOfSamples
{
	return [[self sampleArray] count];
}

- (void)dealloc
{
	[_samples release];
	[_corpus release];
	[_table release];
	[m_noNameArray release];
	[super dealloc];
}

#pragma mark  CMRPropertyListCoding

#define kSamplesKey			@"Samples"

- (BOOL)initializeWithPropertyListRepresentation:(id)rep
{
	NSEnumerator		*iter_;
	id					item_;
	
	if (![rep isKindOfClass:[NSDictionary class]]) return NO;
	item_ = [rep arrayForKey:kSamplesKey];
	if (!item_) return NO;

	iter_ = [item_ objectEnumerator];
	while (item_ = [iter_ nextObject]) {
		CMRMessageSample	*sample_;
		
		sample_ = [CMRMessageSample objectWithPropertyListRepresentation:item_];
		if (!sample_) return NO;

		[self addNewMessageSample:sample_];
	}
	
	return YES;
}

- (id)initWithPropertyListRepresentation:(id)rep
{
	if (self = [self init]) {
		if (![self initializeWithPropertyListRepresentation:rep]) {
			[self release];
			return nil;
		}
	}
	return self;
}

+ (id)objectWithPropertyListRepresentation:(id)rep
{
	return [[[self alloc] initWithPropertyListRepresentation:rep] autorelease];
}

static int compareAsMatchedCount_(id arg1, id arg2, void *info)
{
	UInt32		mc1 = [arg1 matchedCount];
	UInt32		mc2 = [arg2 matchedCount];
	
	if (mc1 == mc2) 
		return NSOrderedSame;
	else if (mc1 > mc2)
		return NSOrderedAscending;
	else
		return NSOrderedDescending;
}

- (NSArray *)sampleArrayByCompacting
{
	NSEnumerator			*iter_;
	CMRMessageSample		*item_;
	NSMutableArray			*compacted_;
	
	compacted_ = [NSMutableArray array];
	iter_ = [[self sampleArray] objectEnumerator];

	while (item_ = [iter_ nextObject]) {
		if ([compacted_ containsObject:item_]) {
			// èdï°Ç∑ÇÈóvëf
			continue;
		}
		[compacted_ addObject:item_];
	}
	
	[compacted_ sortUsingFunction:compareAsMatchedCount_ context:NULL];

	return compacted_;
}

- (id)propertyListRepresentation
{
	NSEnumerator			*iter_;
	CMRMessageSample		*item_;
	NSMutableArray			*samplesRep_;
	
	samplesRep_ = [NSMutableArray array];
	iter_ = [[self sampleArrayByCompacting] objectEnumerator];
	while (item_ = [iter_ nextObject]) {
		[samplesRep_ addObject:[item_ propertyListRepresentation]];
	}
	
	return [NSDictionary dictionaryWithObject:samplesRep_ forKey:kSamplesKey];
}

- (id)initWithDictionaryRepresentation:(NSDictionary *)aDictionary
{
	return [self initWithPropertyListRepresentation:aDictionary];
}

- (NSDictionary *)dictionaryRepresentation
{
	return [self propertyListRepresentation];
}

#pragma mark Detecting
- (NSMutableDictionary *)samplesTable
{
	if (!_table) {
		_table = [[NSMutableDictionary alloc] init];
	}
	return _table;
}

- (void)clear
{
	[[self samples] removeAllObjects];
	[[self samplesTable] removeAllObjects];
}

- (NSArray *)corpus
{
	return _corpus;
}

- (void)setCorpus:(NSArray *)aCorpus
{
	id		tmp;
	
	tmp = _corpus;
	_corpus = [aCorpus retain];
	[tmp release];
}

- (NSArray *)noNameArrayAtWorkingBoard
{
	return m_noNameArray;
}

- (void)setNoNameArrayAtWorkingBoard:(NSArray *)anArray
{
	[anArray retain];
	[m_noNameArray release];
	m_noNameArray = anArray;
}

- (BOOL)nanashiAllowedAtWorkingBoard
{
	return _nanashiAllowed;
}

- (void)setNanashiAllowedAtWorkingBoard:(BOOL)allowed
{
	_nanashiAllowed = allowed;
}

- (void)addNewMessageSample:(CMRMessageSample *)aSample
{
	[self setupAppendingSampleForSample:aSample table:[self samplesTable]];
	[[self samples] addObject:aSample];
}

- (void)addSamplesFromDetecter:(CMRSamplingDetecter *)aDetecter
{
	NSEnumerator		*iter_;
	CMRMessageSample	*sample_;

	if (!aDetecter || 0 == [aDetecter numberOfSamples])
		return;
	
	iter_ = [[aDetecter sampleArray] objectEnumerator];
	while (sample_ = [iter_ nextObject]) {
		[self addNewMessageSample:sample_];
	}
}

- (void)addSample:(CMRThreadMessage *)aMessage with:(CMRThreadSignature *)aThread
{
	CMRMessageSample	*sample_;
	CMRThreadMessage	*message_;

	UTILAssertNotNilArgument(aMessage, @"Sample Message");
	
	message_ = [[aMessage copyWithZone:[self zone]] autorelease];
	[message_ clearTemporaryAttributes];
	
	[message_ setSpam:YES];
	[message_ setProperty:kSampleAsAny];

	sample_ = [CMRMessageSample sampleWithMessage:message_ withThread:aThread];
	[self addNewMessageSample:sample_];
}

- (void)removeSampleCache:(CMRMessageSample *)aSample with:(CMRThreadSignature *)aThread
{
	NSMutableDictionary	*sampleTbl = [self samplesTable];
	CMRMessageSample	*mSample;
	CMRThreadMessage	*sampleMsg;
	id					key;

	sampleMsg = [aSample message];
	
	key = [sampleMsg IDString];
	mSample = [sampleTbl objectForKey:key];
	if (mSample == aSample) {
		UTIL_DEBUG_WRITE(@"ID Cache Removed");
		[sampleTbl removeObjectForKey:key];
	}
	key = [sampleMsg name];
	mSample = [sampleTbl objectForKey:key];
	if (mSample == aSample) {
		UTIL_DEBUG_WRITE(@"Name Cache Removed");
		[sampleTbl removeObjectForKey:key];
	}
	key = [sampleMsg host];
	mSample = [sampleTbl objectForKey:key];
	if (mSample == aSample) {
		UTIL_DEBUG_WRITE(@"Host Cache Removed");
		[sampleTbl removeObjectForKey:key];
	}
	key = aThread;
	mSample = [sampleTbl objectForKey:key];
	if (mSample == aSample) {
		UTIL_DEBUG_WRITE(@"ThreadLocal Cache Removed");
		[sampleTbl removeObjectForKey:key];
	}
}

- (void)removeSample:(CMRThreadMessage *)aMessage with:(CMRThreadSignature *)aThread
{
	SGBaseCArrayWrapper	*mArray = [self samples];
	CMRMessageSample	*mSample;
	NSArray				*mSet = [self noNameArrayAtWorkingBoard];
	int					i;
	// àÍívÇ∑ÇÈÇ‡ÇÃÇÇ∑Ç◊ÇƒéÊÇËèúÇ≠
	for (i = [mArray count] -1; i >= 0; i--) {
		mSample = SGBaseCArrayWrapperObjectAtIndex(mArray, i);
		if (detectMessageAny_(mSample, aMessage, aThread, mSet)) {
			UTIL_DEBUG_WRITE2(@"Sample:%u %@ was removed.", i, mSample);
			[self removeSampleCache:mSample with:aThread];
			[mArray removeObjectAtIndex:i];
		}
	}
}

- (BOOL)detectMessage:(CMRThreadMessage *)aMessage
{
	return [self detectMessage:aMessage with:nil];
}

- (NSArray *)NGExpressionsForTargetMask:(unsigned int)mask
{
	NSMutableArray *array = [NSMutableArray array];
	NSEnumerator *iter = [[self corpus] objectEnumerator];
	BSNGExpression	*expression;

	while (expression = [iter nextObject]) {
		if ([expression targetMask] & mask) {
			[array addObject:expression];
		}
	}

	return (NSArray *)array;
}

- (BOOL)detectStringUsingCorpus:(NSString *)source targetMask:(unsigned int)mask
{
	NSArray *NGExpressions = [self NGExpressionsForTargetMask:mask];
	NSEnumerator *iter = [NGExpressions objectEnumerator];
	BSNGExpression	*NGExp;

//	OgreSyntax syntax;
	OGRegularExpression *regExp;

	while (NGExp = [iter nextObject]) {
/*		if ([NGExp isRegularExpression] && [NGExp validAsRegularExpression]) {
			syntax = OgreRubySyntax;
		} else {
			syntax = OgreSimpleMatchingSyntax;
		}

		regexp = [[OGRegularExpression alloc] initWithString:[NGExp expression]
													 options:OgreNoneOption
													  syntax:syntax
											 escapeCharacter:OgreBackslashCharacter];

		if ([regexp matchInString:source]) {
			[regexp release];
			return YES;
		}
		[regexp release];*/
		if (regExp = [NGExp OGRegExpInstance]) {
			if ([regExp matchInString:source]) return YES;
		} else {
			if ([source rangeOfString:[NGExp expression] options:NSLiteralSearch].length != 0) return YES;
		}
	}
	return NO;
}

- (BOOL)detectMessageUsingCorpus:(CMRThreadMessage *)aMessage
{
	if (![self corpus]) return NO;

	NSMutableString *name_, *mail_, *message_;
	NSString	*field;

	// ñºëO
	field = [aMessage name];
	if (!checkNameIsNonSignificant_(field)) {
		if (![self nanashiAllowedAtWorkingBoard] || ![[self noNameArrayAtWorkingBoard] containsObject:field]) {
			name_ = [[field mutableCopy] autorelease];
			[CMXTextParser convertMessageSourceToCachedMessage:name_];
			if ([self detectStringUsingCorpus:name_ targetMask:BSNGExpressionAtName]) {
				return YES;
			}
		}
	}

	// ÉÅÅ[Éã
	field = [aMessage mail];
	if (!checkMailIsNonSignificant_(field)) {
		mail_ = [[field mutableCopy] autorelease];
		[CMXTextParser replaceEntityReferenceWithString:mail_];
		if ([self detectStringUsingCorpus:mail_ targetMask:BSNGExpressionAtMail]) {
			return YES;
		}
	}
	
	// ñ{ï∂
	field = [aMessage messageSource];
	message_ = [[field mutableCopy] autorelease];
	[CMXTextParser convertMessageSourceToCachedMessage:message_];
	if ([self detectStringUsingCorpus:message_ targetMask:BSNGExpressionAtMessage]) {
		return YES;
	}

	return NO;
}

- (BOOL) detectMessage : (CMRThreadMessage   *) aMessage
			      with : (CMRThreadSignature *) aThread
{
	SGBaseCArrayWrapper	*sampleArray = [self samples];

	NSDictionary		*cacheDict = [self samplesTable];
	NSArray	*array_ = [self noNameArrayAtWorkingBoard];
	CMRMessageSample	*sample;
	int					i, cnt;
	id cache[4];
	
	// ----------------------------------------
	// à»â∫ÇÃçÄñ⁄Ç≈ÉLÉÉÉbÉVÉÖÇ©ÇÁóDêÊìIÇ…î‰är
	// { ID, Host, Name, Thread ID }
	// ----------------------------------------
	/* key Çê›íË */
	cache[0] = [aMessage IDString];
	cache[1] = [aMessage host];
	cache[2] = [aMessage name];
	cache[3] = aThread;
	
	for (i = 0, cnt = UTILNumberOfCArray(cache); i < cnt; i++) {
		sample = [cacheDict objectForKey : cache[i]];
		if (sample != nil) {
			if (detectMessageAny_(sample, aMessage, aThread, array_)) {//set_)) {
				return YES;
			}
		}
		cache[i] = sample;
	}

	for (i = 0, cnt = [sampleArray count]; i < cnt; i++) {
		sample = SGBaseCArrayWrapperObjectAtIndex(sampleArray, i);
		if (detectMessageAny_(sample, aMessage, aThread, array_))
			return YES;
	}

	// åÍãÂèWçáÇ∆î‰är
	if ([self detectMessageUsingCorpus:aMessage])
		return YES;
	
	return NO;
}

/*
ñ≥éãÉäÉXÉgÅF
ÉÅÅ[ÉãóìÅF"sage", "age", "0"
ñºëOÅFÉåÉXÉäÉìÉNÅAî¬ÇÃñºñ≥Çµ


ÅiIDÅjî¬Ç∆ ID Ç™àÍív
ÅiñºëOÅjÉTÉìÉvÉãÇ…ìØÇ∂ñºëOÇ™ï°êîÇ†ÇËÅAID Ç™àŸÇ»ÇÈèÍçáÇÕñºëOÇégópÇ∑ÇÈ
ÅiÉÅÅ[ÉãóìÅjñºëOÇ‡IDÇ‡ñ≥éãÇ∑ÇÈèÍçáÇÕçló∂Ç∑ÇÈ
Åiñ{ï∂Åjì‡óeÇ™àÍív

@param sample í«â¡ó\íËÇÃÉTÉìÉvÉã
@param table  Ç±ÇÍÇ‹Ç≈í«â¡Ç≥ÇÍÇΩÉTÉìÉvÉãÇÃé´èëÅB
			Å@ÉLÅ[ÇÕñºëOÇ©IDÅiÉGÉìÉeÉBÉeÉBâåàìôÇÕÇµÇ»Ç¢Åj
*/
- (void) setupAppendingSampleForSample: (CMRMessageSample *) sample table: (NSMutableDictionary *) table
{
	CMRThreadMessage	*m = [sample message];
	CMRThreadSignature	*threadIdentifier = [sample threadIdentifier];
	unsigned			sign;		// çló∂Ç∑ÇÈçÄñ⁄ÇÃÉtÉâÉO
	NSString			*s;
	id					tmp;
	CMRThreadMessage	*tmp_m;
	NSString			*tmpString;
	
	UTILCAssertNotNil(sample);
	UTILCAssertNotNil(table);
	
	// äÓñ{ìIÇ…ÉÅÅ[ÉãóìÇ∆ÉzÉXÉgÅAñºëOóìÅiÉXÉåÉbÉhå¿íËÅjÇÕñ≥éãÇ∑ÇÈ
	sign = kSampleAsAny;
	sign &= ~kSampleAsMailMask;
	sign &= ~kSampleAsHostMask;
	sign &= ~kSampleAsThreadLocalMask;
	
	
	/* ID */
	tmpString = [m IDString];

	if (!tmpString || checkIDIsNonSignificant_([tmpString stringByStriped])) {
	   // ID Ç™Ç»Ç¢Ç©ÅAèdóvÇ≈Ç»Ç¢ÅBID Çñ≥éãÅB
		sign &= ~kSampleAsIDMask; 
	} else {
		// ID Ç≈ìoò^
		[table setObject:sample forKey:tmpString];
	}

	/* Host */
	tmpString = [m host];
	s = [tmpString stringByStriped];
	if ([s length] > 0) {
		// Host Ç≈ìoò^
		sign |= kSampleAsHostMask; 
		[table setObject:sample forKey:tmpString];
	}
	
	/* Name */
	// ÉGÉìÉeÉBÉeÉBéQè∆ÇâåàÇµÅAñºëOÇê≥ãKâª
	tmpString = [m name];
//	s = [tmpString stringByReplaceEntityReference];

//    if (!s) sign &= ~kSampleAsNameMask;

//	if (![self nanashiAllowedAtWorkingBoard] || [[self noNameArrayAtWorkingBoard] containsObject:s]) {
    	// î¬ÇÃñºñ≥ÇµÇ∆ìØÇ∂ñºëOÅBÇ‹ÇΩÇÕî¬ÇÃñºñ≥ÇµÇ∆ìØÇ∂ñºëOÇ≈ÇÕÇ»Ç¢Ç™ÅAÇ±ÇÃî¬Ç≈ÇÕñºëOóìïKê{ÅBñ≥éãÅB
//	    sign &= ~kSampleAsNameMask;
//	} else {
	if (![self nanashiAllowedAtWorkingBoard] || [[self noNameArrayAtWorkingBoard] containsObject:tmpString]) {
		sign &= ~kSampleAsNameMask;
	} else {
		// ñºëOÇÃï∂éöóÒÇ≈åüèÿ
		s = [tmpString stringByReplaceEntityReference];
		s = [s stringByStriped];
		if (checkNameIsNonSignificant_(s)) {
            // èdóvÇ≈Ç»Ç¢ñºëO
			sign &= ~kSampleAsNameMask;
		} else if (checkNameHasResLink_(s)) {
			// ÉåÉXÇ÷ÇÃÉäÉìÉN
			// ìØàÍÉXÉåÉbÉhè„Ç≈Ç–Ç∆Ç¬ëOÇ…ìoò^Ç≥ÇÍÇƒÇ¢ÇÍÇŒ
			// ÉXÉåÉbÉhÉçÅ[ÉJÉãÇ≈çló∂Ç∑ÇÈ
			sign &= ~kSampleAsNameMask;
			
			tmp = [table objectForKey : threadIdentifier];
			tmp_m = [(CMRMessageSample*)tmp message];
			if (tmp && tmp_m && [[tmp_m name] isEqualToString : tmpString]) {
				if (0 == ([tmp_m property] & kSampleAsThreadLocalMask)) {
					sign |= kSampleAsThreadLocalMask;
				}
			} else if (threadIdentifier) {
				// ÉXÉåÉbÉh Ç≈ìoò^
				[table setObject:sample forKey:threadIdentifier];
			}
		}
	}

    // Ç±Ç±Ç‹Ç≈ÇÃÉtÉBÉãÉ^ÉäÉìÉOÇ≈ñºëOÇçló∂Ç©ÇÁäOÇµÇ´ÇÍÇƒÇ¢Ç»Ç¢
	if ((sign & kSampleAsNameMask) != 0) {
		if ((sign & kSampleAsIDMask) || (sign & kSampleAsHostMask)) {
			// Ç∑Ç≈Ç…àÍìxñºëOÇ≈ìoò^Ç≥ÇÍÇƒÇ®ÇËÅAÇ©Ç¬
			// ID/Host Ç™àŸÇ»ÇÈÅiÇ‹ÇΩÇÕ ID/Host Ç™Ç»Ç¢ÅjèÍçáÇ…ÅA
			// ñºëOÇ≈ìoò^
			
			sign &= ~kSampleAsNameMask;
			tmp = [table objectForKey : tmpString];
			tmp_m = [(CMRMessageSample*)tmp message];
			if (tmp && tmp_m && (0 == ([tmp_m property] & kSampleAsNameMask))) {
				BOOL	q = YES;
				
				if ((sign & kSampleAsIDMask))
					q = q && (NO == [[tmp_m IDString] isEqualToString : [m IDString]]);
				if ((sign & kSampleAsHostMask))
					q = q && (NO == [[tmp_m host] isEqualToString : [m host]]);
				
				if (q) {
					sign |= kSampleAsNameMask;
					[table setObject:sample forKey:tmpString];
				}
			} else {
				// ñºëOÇ≈ìoò^
				[table setObject:sample forKey:tmpString];
			}
		} else {
			// ID Ç‡ Host Ç‡Ç»Ç¢ÇÃÇ≈ÅAñºëOÇ≈ìoò^
			sign |= kSampleAsNameMask;
			[table setObject:sample forKey:tmpString];
		}
	} else {
		if (0 == (sign & kSampleAsIDMask)) {
			/* Name */
			// ñºëOÇ‡IDÇ‡égÇ¶Ç»Ç¢èÍçáÇÃÇ›
			// ÉÅÅ[ÉãóìÇÃï∂éöóÒÇ≈åüèÿ
			s = [[[m mail] stringByReplaceEntityReference] stringByStriped];
			if (!checkMailIsNonSignificant_(s)) {
				sign |= kSampleAsMailMask;
//			} else {
				// IDÅAñºëOÅAÉÅÅ[ÉãóìÅAÇ¢Ç∏ÇÍÇ≈Ç‡ãÊï Ç≈Ç´Ç»Ç¢
			}
		}
	}
	
	[m setProperty : sign];
}
@end

#pragma mark Static Funcs

static int detectMessageAny_(CMRMessageSample *s, CMRThreadMessage *m, CMRThreadSignature *t, NSArray *noNamesArray)
{
	int		match;
	
	match = doDetectMessageAny_([s message], [s threadIdentifier], m, t, noNamesArray);
	if (match != 0) { 
		UTIL_DEBUG_WRITE2(@"detectMessage:%u match=%d", [m index], match);
		[s incrementMatchedCount];
	}
	return match;
}
static int doDetectMessageAny_(
				CMRThreadMessage	*m1,	// sample
				CMRThreadSignature	*t1,	// sample
				CMRThreadMessage	*m2,	// target
				CMRThreadSignature	*t2,	// target
				NSArray *noNamesArray)
{
	BOOL				Eq_b, Eq_t;
	unsigned			mask = [m1 property];
	
	NSString			*b1 = [t1 BBSName];
	NSString			*b2 = [t2 BBSName];
	NSString			*s1, *s2;
	
	Eq_t = [t1 isEqual : t2];
	Eq_b = (NO == Eq_t) ? [b1 isEqualToString : b2] : YES;

	if (Eq_b) { // ìØàÍî¬ÅAID Ç‹ÇΩÇÕ Host ÇÃàÍívÇÉ`ÉFÉbÉNÅiìØàÍî¬Ç≈Ç»Ç¢Ç»ÇÁ IDÅAHost ÇÕå©ÇÈâ¬î\ê´Ç™Ç»Ç¢ÅjÅiÉXÉåå¿íËñºëOÇ‡Åj
		if (kSampleAsIDMask & mask) {
			s1 = [m1 IDString];
			s2 = [m2 IDString];
			
			if ([s1 isEqualToString : s2]) {
				// ìØàÍî¬Ç≈Ç©Ç¬ÅAID Ç™àÍív
				return kSampleAsIDMask;
			}
		}
		
		if (kSampleAsHostMask & mask) {
			s1 = [m1 host];

			if ([s1 length] > 1 && [s1 isEqualToString : [m2 host]]) {
				// ìØàÍî¬Ç≈Ç©Ç¬ÅAHost Ç™àÍív
				// 2005-02-13 èCê≥ÅFìØàÍî¬Ç≈Ç©Ç¬ÅAHost Ç™ìÒï∂éöà»è„ÅAÇ©Ç¬ÅAHost Ç™àÍív
				// ågë—ÅEPC ãÊï ÇÃ0,oëŒçÙ
				return kSampleAsHostMask;
			}
		}
	
		// ñºëOÅiÉXÉåÉbÉhå¿íËÅj// ìñëRÅAìØàÍî¬
		if (kSampleAsThreadLocalMask & mask) { 
			if (Eq_t) {
				s1 = [m1 name];
				s2 = [m2 name];
				
				if ([s1 isEqualToString : s2]) {
					// ìØàÍÉXÉåÉbÉhÇ≈Ç©Ç¬ñºëOÇ™àÍív
					return kSampleAsThreadLocalMask;
				}
			}
		}
	}
	// ñºëO
	if (kSampleAsNameMask & mask) { 
		s2 = [m2 name];
//		if (NO == [noNamesSet containsObject: s2]) {
		if (![noNamesArray containsObject:s2]) {
			if ([[m1 name] isEqualToString : s2]) {
				return kSampleAsNameMask;
			}
		}
	}
	
	// ÉÅÅ[Éãóì
	if (kSampleAsMailMask & mask) { 
		s1 = [m1 mail];
		s2 = [m2 mail];
		if ([s1 isEqualToString : s2]) {
			return kSampleAsMailMask;
		}
	}
	
	// ñ{ï∂
	if (kSampleAsMessageMask & mask) { 
		s1 = [m1 messageSource];
		s2 = [m2 messageSource];
		if ([s1 isEqualToString : s2]) {
			return kSampleAsMessageMask;
		}
	}
	return 0;
}

// ê›íËÇ≥ÇÍÇƒÇ¢Ç»Ç¢ID Ç‚ ÇÊÇ≠Ç†ÇÈñºëOìôÇÕî‰ärëŒè€Ç…ÇµÇ»Ç¢
static BOOL checkMailIsNonSignificant_(NSString *mail)
{
	NSCharacterSet	*cset;
	
	if (nil == mail || 0 == [mail length] || 
		[mail isEqualToString : CMRThreadMessage_AGE_String] ||
		[mail isEqualToString : CMRThreadMessage_SAGE_String] ||
		[mail isEqualToString : @"0"]) 
	{
		UTIL_DEBUG_WRITE1(@"mail:%@ was nonsignificant.", mail);
		return YES;
	}
	
	// êîéöÇÃÇ›
	cset = [NSCharacterSet decimalDigitCharacterSet];
	if (NSEqualRanges([mail rangeOfCharacterFromSet:cset], [mail range])) {
		UTIL_DEBUG_WRITE1(
			@"mail:%@ was decimalDigits, so nonsignificant.", mail);
		return YES;
	}
		
	return NO;
}


// ñºëOóìÇÃÉ`ÉFÉbÉN
static BOOL checkNameIsNonSignificant_(NSString *name)
{
	if (nil == name || 0 == [name length]) {
		UTIL_DEBUG_WRITE1(
			@"name:%@ was empty, so was nonsignificant.", name);
		return YES;
	}
	return NO;
}

// ID óìÇÃÉ`ÉFÉbÉN
static BOOL checkIDIsNonSignificant_(NSString *idStr_)
{
	// ID Ç™ 0 or 1ï∂éöÅAÇ‹ÇΩÇÕÅu???ÅvÇ≈énÇ‹ÇÈÇ∆Ç´
	if (nil == idStr_ || 2 > [idStr_ length] || [idStr_ hasPrefix : @"???"]) 
	{
		UTIL_DEBUG_WRITE1(@"ID:%@ was nonsignificant.", idStr_);
		return YES;
	}

	return NO;
}

static BOOL checkNameHasResLink_(NSString *name)
{
	NSScanner		*scanner;
	NSCharacterSet	*cset;
	NSCharacterSet	*whiteCset = [NSCharacterSet whitespaceCharacterSet];
	
	// >> xx: ÉåÉXÇ÷ÇÃÉäÉìÉNÇ‡ñ≥éãÇ∑ÇÈ
	scanner = [NSScanner scannerWithString : name];
	cset = [NSCharacterSet innerLinkPrefixCharacterSet];
	[scanner scanCharactersFromSet:cset intoString:NULL];

	[scanner scanCharactersFromSet: whiteCset intoString: NULL];
	
	while (1) {
		cset = [NSCharacterSet numberCharacterSet_JP];
		if (NO == [scanner scanCharactersFromSet:cset intoString:NULL])
			break;

		[scanner scanCharactersFromSet: whiteCset intoString: NULL];
		if ([scanner isAtEnd]) {
			
			UTIL_DEBUG_WRITE1(
				@"name:%@ was ResLink, so was nonsignificant.",
				name);
			
			return YES;
			break;
		}
		cset = [NSCharacterSet innerLinkRangeCharacterSet];
		[scanner scanCharactersFromSet:cset intoString:NULL];
		cset = [NSCharacterSet innerLinkSeparaterCharacterSet];
		[scanner scanCharactersFromSet:cset intoString:NULL];

		[scanner scanCharactersFromSet: whiteCset intoString: NULL];
	}
	
	return NO;
}
